Consider a money system consisting of n coins. Each coin has a positive integer value. Your task is to calculate the number of distinct ways you can produce a money sum x using the available coins.

For example, if the coins are {2,3,5} and the desired sum is 9, there are 8 ways:
```  
2+2+5

2+5+2

5+2+2

3+3+3

2+2+2+3

2+2+3+2

2+3+2+2

3+2+2+2

```

Input

The first input line has two integers n and x: the number of coins and the desired sum of money.

The second line has n distinct integers c1,c2,…,cn: the value of each coin.

Output

Print one integer: the number of ways modulo 10e9+7.

Constraints

    1≤n≤100


1≤x≤10e6

1≤ci≤10e6


Example

Input:
```
3 9
2 3 5
```
Output:
8

- **PREREQUISITES**:
```
Minimal knowledge on what dp is.Please do refer to the conceptual section on dp if you are a beginner.

```

- **Solution**:

```
define:
dp[x] = number of ways to make value x.

We initialize dp[0] = 1, saying the empty set is the only way to make 0.

Like in "previous problem", we loop over the possibilities for last coin added. There are dp[x-v] ways to make x, when adding a coin with value v last. This is since we can choose any combination for the first coins to sum to x-v, but need to choose v as the last coin. Summing over all the possibilities for v gives dp[x].


we are good to go now.
```

- **TIME COMPLEXITY**:
```
O(n.target).
we use two nested loops.
```
