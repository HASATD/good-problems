Consider a money system consisting of n coins. Each coin has a positive integer value. Your task is to produce a sum of money x using the available coins in such a way that the number of coins is minimal.

For example, if the coins are {1,5,7} and the desired sum is 11, an optimal solution is 5+5+1 which requires 3 coins.

Input

The first input line has two integers n and x: the number of coins and the desired sum of money.

The second line has n distinct integers c1,c2,…,cn: the value of each coin.

Output

Print one integer: the minimum number of coins. If it is not possible to produce the desired sum, print −1.

Constraints

    1≤n≤100


1≤x≤10e6

1≤ci≤10e6


Example

Input:
3 11
1 5 7

Output:
3


- **PREREQUISITES**:
```
Minimal knowledge on what dp is.Please do refer to the conceptual section on dp if you are a beginner.
This is based on unbounded knapsack.
```

- **Solution**:

```
define:
This is a classical problem called the unbounded knapsack problem.

dp[x] = minimum number of coins with sum x.

We look at the last coin added to get sum x, say it has value v. We need dp[x-v] coins to get value x-v, and 1 coin for value v. Therefore we need dp[x-v]+1 coins if weRe to use a coin with value v. Checking all possibilities for v must include the optimal choice of last coin.

As an implementation detail, we use dp[x] = 1e9 = 109≈∞109≈∞ to signify that it is not possible to make value x with the given coins.


we are good to go now.
```

- **TIME COMPLEXITY**:
```
O(n.target).
we use two nested loops.
```
