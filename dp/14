Your task is to count the number of ways numbers 1,2,…,n can be divided into two sets of equal sum.

For example, if n=7, there are four solutions:
```

   1. {1,3,4,6} and {2,5,7}
   2. {1,2,5,6} and {3,4,7}
   3. {1,2,4,7} and {3,5,6}
   4. {1,6,7} and {2,3,4,5}

```
Input

The only input line contains an integer n.

Output

Print the answer modulo 10e9+7.

Constraints

    1≤n≤500


Example
```
Input:
7

Output:
4
```

- **PREREQUISITES**:
```
Minimal knowledge on what dp is.Please do refer to the conceptual section on dp if you are a beginner.
Refer to unbounded knapsack.This is an unbounded knapsack problem in disguise.

```

- **Solution**:

```
define:
This is a 0-1 knapsack in disguise. If we are to have two subsets of equal sum, they must sum to half the total sum each. This means if the total sum n(n+1)2n(n+1)2 is odd, the answer is zero (no possibilities). Otherwise we run 0-1 knapsack to get the number of ways to reach n(n+1)4n(n+1)4 using subsets of the numbers 1..n-1. Why n-1? Because by only considering numbers up to n-1, we always put n in the second set, and therefore only count each pair of sets once (otherwise we count every pair of sets twice).

dp[i][x] = number of ways to make sum x using subsets of the numbers 1..i .

We say there is one way (the empty set) to make sum 0, so dp[0][0] = 1;

For counting number of ways to make sum x using values up to i, we consider the number i. Either we didn't include it, then there are dp[i-1][x] possibilities, or we included it, and there are dp[i-1][x-i] possibilities. So dp[i][x] = dp[i-1][x] + dp[i-1][x-i].
we are good to go now.
```

- **TIME COMPLEXITY**:
```
The complexity is O(n.k). k = n(n+1)/4 => O(n^3).

```
