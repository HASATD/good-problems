- **PREREQUISITES**:
```
Minimal knowledge on what dp is.Please do refer to the conceptual section on dp if you are a beginner.

```

- **Solution**:

```
define:
Even though days can go up to 10^9, we only care about days where we either start or just finished a project. So before doing anything else, we compress all days to their index among all interesting days (i.e days corresponding to aiai or bi+1bi+1 for some i). This way, days range from 0 to less than 2n≤4⋅1052n≤4⋅105.

dp[i] = maximum amount of money we can earn before day i.

On day i, maybe we just did nothing, so we earn what we earned on day i-1, i.e dp[i-1]. Otherwise, we just finished some project. We earned some money doing the project, and use dp[start of project] to know how much money we could have earned before starting the project. Loop through all projects finishing just before day i, and take the best one.
we are good to go now.
```

- **TIME COMPLEXITY**:
```
O(n⋅logn).log comes from day compression.

```
